class OrderedCounter(Counter, OrderedDict):
	pass

- This is a very cool class that is capable of doing an ordered count upon passing a variable to it
- Since it is a chile of Counter and OrderedDict, and it doesn't have any methods, none of the methods will be overwritten by it
- To find which methods are going to be called look for class_name.__mro__. 
	- mro = method resolution order. 
	- For OrderedCounter it is (<class OrederedCounter>, <class Counter>, <class OrderedDict>)



Lambda functions:
	- Just like the regular functions. receives and input and returns the body 
	- example:
		- lambda x: x+1
				- here x is input.
				- lambda shows there is an inline lambda funtion happening here
				- x+1 is the body as well as the return value of the functions
				- This means (lambda x: x+1)(2) should return 3


Reduce function:
	- This fucntion performs a mathematical procedure called folding, or reduction
	- In simple words, it gets a function and applies it to all variables of an iterable
	- example usage:
		-  A = [1,2,3,4,5]
		- print(reduce(lambda x,y: x*y, A))
			- 120
		- print(reduce(lambda x,y: x+y, A)) 
			- 15
		- print(reduce(lambda x,y: x if x > y else y, A))
			- 5  (returns max of the list)


Generator, Yield and Iterables
	To understand what yield does, you must understand what generators are. And before you can understand generators, you must understand iterables.

	Iterables
	When you create a list, you can read its items one by one. Reading its items one by one is called iteration:

	>>> mylist = [1, 2, 3]
	>>> for i in mylist:
	...    print(i)
	1
	2
	3
	mylist is an iterable. When you use a list comprehension, you create a list, and so an iterable:

	>>> mylist = [x*x for x in range(3)]
	>>> for i in mylist:
	...    print(i)
	0
	1
	4
	Everything you can use "for... in..." on is an iterable; lists, strings, files...

	These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.

	Generators
	Generators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly:

	>>> mygenerator = (x*x for x in range(3))
	>>> for i in mygenerator:
	...    print(i)
	0
	1
	4
	It is just the same except you used () instead of []. BUT, you cannot perform for i in mygenerator a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.

	Yield
	yield is a keyword that is used like return, except the function will return a generator.

	>>> def create_generator():
	...    mylist = range(3)
	...    for i in mylist:
	...        yield i*i
	...
	>>> mygenerator = create_generator() # create a generator
	>>> print(mygenerator) # mygenerator is an object!
	<generator object create_generator at 0xb7555c34>
	>>> for i in mygenerator:
	...     print(i)
	0
	1
	4
	Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.

	To master yield, you must understand that when you call the function, the code you have written in the function body does not run. The function only returns the generator object, this is a bit tricky.

	Then, your code will continue from where it left off each time for uses the generator.

	Now the hard part:

	The first time the for calls the generator object created from your function, it will run the code in your function from the beginning until it hits yield, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting yield. That can be because the loop has come to an end, or because you no longer satisfy an "if/else".

	Generator length
			class GeneratorLen(object):
		    def __init__(self, gen, length):
		        self.gen = gen
		        self.length = length

		    def __len__(self): 
		        return self.length

		    def __iter__(self):
		        return self.gen

		g = some_generator()
		h = GeneratorLen(g, 1)
		print len(h), list(h)


r and f strings 
	An r-string is a raw string.
		It ignores escape characters. For example, "\n" is a string containing a newline character, and r"\n" is a string containing a backslash and the letter n.
		If you wanted to compare it to an f-string, you could think of f-strings as being "batteries-included." They have tons of flexibility in the ability to escape characters and execute nearly arbitrary expressions. The r-string on the other hand is stripped down and minimalist, containing precisely the characters between its quotation marks.
		As far as actually using the things, typically you would use an r-string if you're passing the string into something else that uses a bunch of weird characters or does its own escaping so that you don't have to think too hard about how many backslashes you really need to get everything to work correctly. In your example, they at least needed r-strings to get the \a bit working correctly without double escapes. Note that '$\\alpha > \\beta$' is identical to r'$\alpha > \beta$'.
		Since you're using f-strings, I'll assume you have at least Python 3.6. Not all of these options are supported for older versions but any of the following prefixes are valid in Python 3.6+ in any combination of caps and lowers: r, u, f, rf, fr, b, rb, br
		The b-strings are binary literals. In Python 2 they do nothing and only exist so that the source code is compatible with Python 3. In Python 3, they allow you to create a bytes object. Strings can be thought of as a view of the underlying bytes, often restricted as to which combinations are allowed. The distinction in types helps to prevent errors from blindly applying text techniques to raw data. In Python 3, note that 'A'==b'A' is False. These are not the same thing.
		The u-strings are unicode literals. Strings are unicode by default in Python 3, but the u prefix is allowed for backward compatibility with Python 2. In Python 2, strings are ASCII by default, and the u prefix allows you to include non-ASCII characters in your strings. For example, note the accented character in the french phrase u"Fichier non trouv√©".
		In the kind of code I write, I rarely need anything beyond r, u, f, b. Even b is a bit out there. Other people deal with those prefixes every day (presumably). They aren't necessarily anything you need to familiarize yourself with, but knowing they exist and being able to find their documentation is probably a good skill to have.
		Just so that it's in the answer instead of buried in a comment, @JamesGibson linked the language specification, and that's the same place I pulled the prefix list from. With your math background, a formal language specification might be especially interesting -- depending a little on how much you like algebra and mathematical logic.

		Even if it's just for a semantically trivial language like Forth, I think many programmers would enjoy writing a short interpreter and gain valuable insight into how their language of choice works.
